

#ifndef _FILTERS_MYFILTER_H_
#define _FILTERS_MYFILTER_H_

/**
 * @file MyFilter.h
 * @author Your name <handle@youremail.com>
 *
 * This file contains a filter functor generated by gpl.pl
 **/

#include <string>
#include "madara/filters/BufferFilter.h"

namespace filters
{
/**
 * @class MyFilter
 * @brief A new filter generated by gpl.pl
 */
class MyFilter : public madara::filters::BufferFilter
{
public:
  /**
   * Constructor
   **/
  MyFilter();

  /**
   * Destructor
   **/
  virtual ~MyFilter();

  /**
   * Encodes the buffer in place using AES encryption
   * @param   source           the source and destination buffer
   * @param   size             the amount of data in the buffer in bytes
   * @param   max_size         the amount of bytes the buffer can hold
   * @return  the new size after encoding
   **/
  virtual int encode(char* source, int size, int max_size) const;

  /**
   * Decodes the buffer in place using AES encryption
   * @param   source           the source and destination buffer
   * @param   size             the amount of data in the buffer in bytes
   * @param   max_size         the amount of bytes the buffer can hold
   * @return  the new size after decoding
   **/
  virtual int decode(char* source, int size, int max_size) const;

  /**
   * Gets the id of the filter. This is used in the serialization process
   * for transports and checkpoints to identify which filter is used.
   **/
  virtual std::string get_id(void);

  /**
   * Gets the version of the filter. @see madara::utility::get_uint_version
   * for one way to get this from a string version
   **/
  virtual uint32_t get_version(void);

private:

};
}

#endif  // _MADARA_FILTERS_SSL_AES_H_
